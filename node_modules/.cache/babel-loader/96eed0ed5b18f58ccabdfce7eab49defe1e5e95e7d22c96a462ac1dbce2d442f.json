{"ast":null,"code":"var _jsxFileName = \"/Users/zhangrongwu/workspace/AI-Project/file-transfer-web/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport QRCode from 'qrcode.react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER = 'http://localhost:3001';\nconst App = () => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [sessionId, setSessionId] = useState(null);\n  const [transferStatus, setTransferStatus] = useState('idle');\n  useEffect(() => {\n    const newSocket = io(SOCKET_SERVER);\n    setSocket(newSocket);\n    newSocket.on('session-created', id => {\n      setSessionId(id);\n      setTransferStatus('waiting');\n    });\n    newSocket.on('receiver-connected', () => {\n      setTransferStatus('connected');\n      startFileTransfer();\n    });\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n  const handleFileSelect = event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (file && socket) {\n      setSelectedFile(file);\n      socket.emit('create-session', {\n        fileName: file.name,\n        fileSize: file.size,\n        fileType: file.type\n      });\n    }\n  };\n  const startFileTransfer = () => {\n    if (!selectedFile || !socket) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      var _e$target;\n      const arrayBuffer = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result;\n      const chunkSize = 64 * 1024; // 64KB chunks\n\n      for (let offset = 0; offset < arrayBuffer.byteLength; offset += chunkSize) {\n        const chunk = arrayBuffer.slice(offset, offset + chunkSize);\n        socket.emit('file-chunk', {\n          sessionId,\n          chunk: Array.from(new Uint8Array(chunk)),\n          offset,\n          total: arrayBuffer.byteLength\n        });\n      }\n    };\n    reader.readAsArrayBuffer(selectedFile);\n  };\n  const renderQRCode = () => {\n    if (!sessionId) return null;\n    const qrData = JSON.stringify({\n      server: SOCKET_SERVER,\n      sessionId\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(QRCode, {\n        value: qrData,\n        size: 256,\n        level: 'H',\n        renderAs: \"svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u4F20\\u8F93\\u72B6\\u6001: \", transferStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: '600px',\n      margin: '0 auto',\n      padding: '20px',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u52A8\\u6001\\u6587\\u4EF6\\u4F20\\u8F93\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileSelect,\n      style: {\n        margin: '20px 0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), selectedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u6587\\u4EF6: \", selectedFile.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u5927\\u5C0F: \", (selectedFile.size / 1024).toFixed(2), \" KB\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), renderQRCode()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"P9gq/Qi64MXCGNHzHlbiUU6plyg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","QRCode","io","jsxDEV","_jsxDEV","SOCKET_SERVER","App","_s","socket","setSocket","selectedFile","setSelectedFile","sessionId","setSessionId","transferStatus","setTransferStatus","newSocket","on","id","startFileTransfer","disconnect","handleFileSelect","event","_event$target$files","file","target","files","emit","fileName","name","fileSize","size","fileType","type","reader","FileReader","onload","e","_e$target","arrayBuffer","result","chunkSize","offset","byteLength","chunk","slice","Array","from","Uint8Array","total","readAsArrayBuffer","renderQRCode","qrData","JSON","stringify","server","style","textAlign","marginTop","children","value","level","renderAs","_jsxFileName","lineNumber","columnNumber","maxWidth","margin","padding","onChange","toFixed","_c","$RefreshReg$"],"sources":["/Users/zhangrongwu/workspace/AI-Project/file-transfer-web/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport QRCode from 'qrcode.react';\nimport { io, Socket } from 'socket.io-client';\n\nconst SOCKET_SERVER = 'http://localhost:3001';\n\nconst App: React.FC = () => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const [transferStatus, setTransferStatus] = useState<string>('idle');\n\n  useEffect(() => {\n    const newSocket = io(SOCKET_SERVER);\n    setSocket(newSocket);\n\n    newSocket.on('session-created', (id: string) => {\n      setSessionId(id);\n      setTransferStatus('waiting');\n    });\n\n    newSocket.on('receiver-connected', () => {\n      setTransferStatus('connected');\n      startFileTransfer();\n    });\n\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && socket) {\n      setSelectedFile(file);\n      socket.emit('create-session', {\n        fileName: file.name,\n        fileSize: file.size,\n        fileType: file.type\n      });\n    }\n  };\n\n  const startFileTransfer = () => {\n    if (!selectedFile || !socket) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const arrayBuffer = e.target?.result as ArrayBuffer;\n      const chunkSize = 64 * 1024; // 64KB chunks\n\n      for (let offset = 0; offset < arrayBuffer.byteLength; offset += chunkSize) {\n        const chunk = arrayBuffer.slice(offset, offset + chunkSize);\n        socket.emit('file-chunk', {\n          sessionId,\n          chunk: Array.from(new Uint8Array(chunk)),\n          offset,\n          total: arrayBuffer.byteLength\n        });\n      }\n    };\n    reader.readAsArrayBuffer(selectedFile);\n  };\n\n  const renderQRCode = () => {\n    if (!sessionId) return null;\n\n    const qrData = JSON.stringify({\n      server: SOCKET_SERVER,\n      sessionId\n    });\n\n    return (\n      <div style={{ textAlign: 'center', marginTop: '20px' }}>\n        <QRCode \n          value={qrData} \n          size={256} \n          level={'H'}\n          renderAs=\"svg\"\n        />\n        <p>传输状态: {transferStatus}</p>\n      </div>\n    );\n  };\n\n  return (\n    <div style={{ \n      maxWidth: '600px', \n      margin: '0 auto', \n      padding: '20px', \n      textAlign: 'center' \n    }}>\n      <h1>动态文件传输</h1>\n      \n      <input \n        type=\"file\" \n        onChange={handleFileSelect}\n        style={{ margin: '20px 0' }}\n      />\n\n      {selectedFile && (\n        <div>\n          <p>文件: {selectedFile.name}</p>\n          <p>大小: {(selectedFile.size / 1024).toFixed(2)} KB</p>\n          {renderQRCode()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,cAAc;AACjC,SAASC,EAAE,QAAgB,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,aAAa,GAAG,uBAAuB;AAE7C,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC;EACzD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAc,IAAI,CAAC;EACnE,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAgB,IAAI,CAAC;EAC/D,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAS,MAAM,CAAC;EAEpEC,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAGd,EAAE,CAACG,aAAa,CAAC;IACnCI,SAAS,CAACO,SAAS,CAAC;IAEpBA,SAAS,CAACC,EAAE,CAAC,iBAAiB,EAAGC,EAAU,IAAK;MAC9CL,YAAY,CAACK,EAAE,CAAC;MAChBH,iBAAiB,CAAC,SAAS,CAAC;IAC9B,CAAC,CAAC;IAEFC,SAAS,CAACC,EAAE,CAAC,oBAAoB,EAAE,MAAM;MACvCF,iBAAiB,CAAC,WAAW,CAAC;MAC9BI,iBAAiB,CAAC,CAAC;IACrB,CAAC,CAAC;IAEF,OAAO,MAAM;MACXH,SAAS,CAACI,UAAU,CAAC,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,gBAAgB,GAAIC,KAA0C,IAAK;IAAA,IAAAC,mBAAA;IACvE,MAAMC,IAAI,IAAAD,mBAAA,GAAGD,KAAK,CAACG,MAAM,CAACC,KAAK,cAAAH,mBAAA,uBAAlBA,mBAAA,CAAqB,CAAC,CAAC;IACpC,IAAIC,IAAI,IAAIhB,MAAM,EAAE;MAClBG,eAAe,CAACa,IAAI,CAAC;MACrBhB,MAAM,CAACmB,IAAI,CAAC,gBAAgB,EAAE;QAC5BC,QAAQ,EAAEJ,IAAI,CAACK,IAAI;QACnBC,QAAQ,EAAEN,IAAI,CAACO,IAAI;QACnBC,QAAQ,EAAER,IAAI,CAACS;MACjB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMd,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI,CAACT,YAAY,IAAI,CAACF,MAAM,EAAE;IAE9B,MAAM0B,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MAAA,IAAAC,SAAA;MACrB,MAAMC,WAAW,IAAAD,SAAA,GAAGD,CAAC,CAACZ,MAAM,cAAAa,SAAA,uBAARA,SAAA,CAAUE,MAAqB;MACnD,MAAMC,SAAS,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;MAE7B,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGH,WAAW,CAACI,UAAU,EAAED,MAAM,IAAID,SAAS,EAAE;QACzE,MAAMG,KAAK,GAAGL,WAAW,CAACM,KAAK,CAACH,MAAM,EAAEA,MAAM,GAAGD,SAAS,CAAC;QAC3DjC,MAAM,CAACmB,IAAI,CAAC,YAAY,EAAE;UACxBf,SAAS;UACTgC,KAAK,EAAEE,KAAK,CAACC,IAAI,CAAC,IAAIC,UAAU,CAACJ,KAAK,CAAC,CAAC;UACxCF,MAAM;UACNO,KAAK,EAAEV,WAAW,CAACI;QACrB,CAAC,CAAC;MACJ;IACF,CAAC;IACDT,MAAM,CAACgB,iBAAiB,CAACxC,YAAY,CAAC;EACxC,CAAC;EAED,MAAMyC,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI,CAACvC,SAAS,EAAE,OAAO,IAAI;IAE3B,MAAMwC,MAAM,GAAGC,IAAI,CAACC,SAAS,CAAC;MAC5BC,MAAM,EAAElD,aAAa;MACrBO;IACF,CAAC,CAAC;IAEF,oBACER,OAAA;MAAKoD,KAAK,EAAE;QAAEC,SAAS,EAAE,QAAQ;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAC,QAAA,gBACrDvD,OAAA,CAACH,MAAM;QACL2D,KAAK,EAAER,MAAO;QACdrB,IAAI,EAAE,GAAI;QACV8B,KAAK,EAAE,GAAI;QACXC,QAAQ,EAAC;MAAK;QAAAlC,QAAA,EAAAmC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC,eACF7D,OAAA;QAAAuD,QAAA,GAAG,4BAAM,EAAC7C,cAAc;MAAA;QAAAc,QAAA,EAAAmC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAArC,QAAA,EAAAmC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC;EAEV,CAAC;EAED,oBACE7D,OAAA;IAAKoD,KAAK,EAAE;MACVU,QAAQ,EAAE,OAAO;MACjBC,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE,MAAM;MACfX,SAAS,EAAE;IACb,CAAE;IAAAE,QAAA,gBACAvD,OAAA;MAAAuD,QAAA,EAAI;IAAM;MAAA/B,QAAA,EAAAmC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEf7D,OAAA;MACE6B,IAAI,EAAC,MAAM;MACXoC,QAAQ,EAAEhD,gBAAiB;MAC3BmC,KAAK,EAAE;QAAEW,MAAM,EAAE;MAAS;IAAE;MAAAvC,QAAA,EAAAmC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,EAEDvD,YAAY,iBACXN,OAAA;MAAAuD,QAAA,gBACEvD,OAAA;QAAAuD,QAAA,GAAG,gBAAI,EAACjD,YAAY,CAACmB,IAAI;MAAA;QAAAD,QAAA,EAAAmC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9B7D,OAAA;QAAAuD,QAAA,GAAG,gBAAI,EAAC,CAACjD,YAAY,CAACqB,IAAI,GAAG,IAAI,EAAEuC,OAAO,CAAC,CAAC,CAAC,EAAC,KAAG;MAAA;QAAA1C,QAAA,EAAAmC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EACpDd,YAAY,CAAC,CAAC;IAAA;MAAAvB,QAAA,EAAAmC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CACN;EAAA;IAAArC,QAAA,EAAAmC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1D,EAAA,CAvGID,GAAa;AAAAiE,EAAA,GAAbjE,GAAa;AAyGnB,eAAeA,GAAG;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}